version: 2.1

orbs:
  terraform: circleci/terraform@2.1.0

commands:
  install-ansible:
    description: "Install Ansible via Pip"
    parameters:
      version:
        type: string
        default: "2.9.24"        
    steps:
      - run:
          name: Installing Ansible via Pip
          command: |
            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                if [ -n "<<parameters.version>>" ]; then
                  sudo $PIP install ansible==<<parameters.version>> --upgrade
                else
                  sudo $PIP install ansible --upgrade
                fi
              else
                if [ -n "<<parameters.version>>" ]; then
                  $PIP install ansible==<<parameters.version>> --upgrade --user
                else
                  $PIP install ansible --upgrade --user
                fi
              fi
            else
              echo "Unable to install Ansible. Please install pip."
              exit 1
            fi
  
  install-additional-packages:
    description: "Installing additional Packages for Ansible"
    steps:
      - run:
          name: Install boto3 & botocore
          command: |
            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                sudo $PIP install boto3 botocore --upgrade
              else
                $PIP install boto3 botocore --upgrade --user
              fi
            else
              echo "Unable to install boto3 & botocore. Please install pip."
              exit 1
            fi
      - run:
          name: Install amazon.aws
          command: ansible-galaxy collection install amazon.aws
      - run:
          name: Install community.general
          command: ansible-galaxy collection install community.general

  install-runner:
    description: "Install Runner via Ansible"
    steps:
      - run:
          name: Run Ansible Playbook
          command: ansible-playbook -i aws_ec2.yml -vv runner.yml -u ansible -e "RESOURCE_CLASS_CREATION=false NAMESPACE=crowley-namespace ORG_NAME=james-crowley RESOURCE_CLASS=runner-demo API_TOKEN=$API_TOKEN target_hosts=$(cat output.txt)"


jobs:
  running-on-runner:
    machine: true
    resource_class: crowley-namespace/runner-demo
    steps:
      - run: echo "Hi I'm on Runners!"
  
  deploy-runner-via-terraform:
    executor: terraform/default
    steps:
      - checkout
      - terraform/init:
          path: terraform/
      - terraform/apply:
          path: terraform/
          var_file: demo.tfvars
      - run:
          name: Write out Public IP value to output.txt
          command: echo "$(terraform output public_ip)" > output.txt
      - persist_to_workspace:
          root: .
          paths:
            - .

  install-runner-via-ansible:
    executor: ansible
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "dd:8f:af:18:32:a1:c9:b7:86:ca:73:a1:1e:77:db:87"
      - install-ansible:
          version: "2.9.24"
      - install-additional-packages
      - install-runner

  destroy-runner-via-terraform:
    executor: terraform/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/destroy:
          path: terraform/
          var_file: demo.tfvars


executors:
  ansible:
    docker:
      - image: cimg/python:3.9.6


workflows:
  demo:
    jobs:
      - deploy-runner-via-terraform:
          name: "Deploy Server Instance"
      - install-runner-via-ansible:
          name: "Install and Configure Runner" 
          requires: 
            - "Deploy Server Instance"
      - running-on-runner:
          name: "Run job on Runner"
          requires: 
            - "Install and Configure Runner" 
      - destroy-runner-via-terraform:
          name: "Terminate Server Instance"
          requires:
            - "Run job on Runner"
